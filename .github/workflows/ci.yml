name: CI/CD

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'DatabaseSeeder.sln'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        preferLatestVersion: true

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Test
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Pack DatabaseSeeder
      run: dotnet pack src/DatabaseSeeder/DatabaseSeeder.csproj --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} /p:Version=${{ steps.gitversion.outputs.nuGetVersion }}

    - name: Pack DatabaseSeeder.EntityFramework
      run: dotnet pack src/DatabaseSeeder.EntityFramework/DatabaseSeeder.EntityFramework.csproj --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} /p:Version=${{ steps.gitversion.outputs.nuGetVersion }}

    - name: Pack DatabaseSeeder.Json
      run: dotnet pack src/DatabaseSeeder.Json/DatabaseSeeder.Json.csproj --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} /p:Version=${{ steps.gitversion.outputs.nuGetVersion }}

    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg

    - name: Push NuGet packages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        for package in ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg; do
          dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE_URL }}
        done